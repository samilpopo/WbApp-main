//
//  Bank.swift
//
//
//  Created by samil on 15.06.2024.
//

import Foundation

// MARK: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –°—á–µ—Ç–∞

struct Account {
    let accountNumber: String
    private(set) var balance: Double
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
    mutating func topUpBalance(with amount: Double) {
        guard amount >= 0 else {
            print("‚ùå Impossible to top up with a negative amount.")
            return
        }
        
        balance += amount
        print("üü¢ üì• \(self.accountNumber): +\(amount)üí≤. Balance: üí≤\(balance).")
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    mutating func withdrawFromBalance(with amount: Double) -> Bool {
        guard amount >= 0 else {
            print("‚ùå Impossible to withdraw for a negative amount.")
            return false
        }
        
        guard amount <= balance else {
            print("‚ùå \(self.accountNumber): Not enough funds for üí≤\(amount). Balance: üí≤\(balance)")
            return false
        }
        
        balance -= amount
        print("üîª üì§ \(self.accountNumber): -\(amount)üí≤. Balance: üí≤\(balance).")
        
        return true
    }
}


// MARK: –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ë–∞–Ω–∫–∞

final class Bank {
    private var accounts: [String: Account] = [:]
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞
    func addAccount(_ account: Account) {
        accounts[account.accountNumber] = account
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
    func topUpAccount(accountNumber: String, amount: Double) {
        guard var account = accounts[accountNumber] else {
            print("‚ùå Account \(accountNumber) not found.")
            return
        }
        
        account.topUpBalance(with: amount)
        accounts[accountNumber] = account
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ —Å–æ —Å—á–µ—Ç–∞
    func withdrawFromAccount(accountNumber: String, amount: Double) {
        guard var account = accounts[accountNumber] else {
            print("‚ùå Account \(accountNumber) not found.")
            return
        }
        
        if account.withdrawFromBalance(with: amount) {
            accounts[accountNumber] = account
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏
    func transfer(from: String, to: String, amount: Double) {
        guard var fromAccount = accounts[from], var toAccount = accounts[to] else {
            print("‚ùå Account not found.")
            return
        }
        
        print("üì§ \(from) -> üì• \(to): üí≤\(amount)")
        print("\nTransactions:")
        
        if fromAccount.withdrawFromBalance(with: amount) {
            toAccount.topUpBalance(with: amount)
            accounts[from] = fromAccount
            accounts[to] = toAccount
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
    func printAccounts() {
        let sortedAccounts = accounts.values.sorted { $0.accountNumber < $1.accountNumber }
        for account in sortedAccounts {
            print("üßæ Account: \(account.accountNumber), Balance: üí≤\(account.balance)")
        }
    }
}

// MARK:  - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

let bank = Bank()

let account1 = Account(accountNumber: "123", balance: 1000.0)
let account2 = Account(accountNumber: "456", balance: 2000.0)
let account3 = Account(accountNumber: "789", balance: 3000.0)

bank.addAccount(account1)
bank.addAccount(account2)
bank.addAccount(account3)

// –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
print("Accounts List:")
print("-----------------------------")
bank.printAccounts()

print("\n\n")

// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞
print("Top up:")
print("--------------------------")

print("Before:")
bank.printAccounts()
print("")

bank.topUpAccount(accountNumber: "123", amount: 500.0)
bank.topUpAccount(accountNumber: "456", amount: 1000.0)
bank.topUpAccount(accountNumber: "789", amount: 5000.0)

print("\nAfter:")
bank.printAccounts()

print("\n\n")

// –°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
print("Withdraw:")
print("--------------------------")

print("Before:")
bank.printAccounts()
print("")

bank.withdrawFromAccount(accountNumber: "123", amount: 500.0)
bank.withdrawFromAccount(accountNumber: "456", amount: 1000.0)
bank.withdrawFromAccount(accountNumber: "789", amount: 5000.0)

print("\nAfter:")
bank.printAccounts()

print("\n\n")

// –ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏
print("Transfers:")
print("--------------------")

print("Before transfer 1:")
bank.printAccounts()

print("\nTransfer 1:")
bank.transfer(from: "123", to: "789", amount: 300.0)

print("\nAfter transfer 1:")
bank.printAccounts()

print("\n.......................................")

print("\nBefore transfer 2:")
bank.printAccounts()

print("\nTransfer 2:")
bank.transfer(from: "789", to: "456", amount: 10000.0) // <- –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤

print("\nAfter transfer 2:")
bank.printAccounts()

print("\n.......................................")

print("\nBefore transfer 3:")
bank.printAccounts()

print("\nTransfer 3:")
bank.transfer(from: "789", to: "456", amount: 2000.0)

print("\nAfter transfer 3:")
bank.printAccounts()

print("\n")
